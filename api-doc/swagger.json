{
  "swagger": "2.0",
  "info": {
    "description": "goBilling is an open-source billing and payments platform",
    "title": "goBilling",
    "contact": {
      "name": "muhammad.shafiee@gmail.com"
    },
    "license": {
      "name": "The GNU General Public License, Version 3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    }
  },
  "tags": [
    {
      "name": "invoicePayments"
    },
    {
      "name": "export"
    },
    {
      "name": "tags"
    },
    {
      "name": "tenants"
    },
    {
      "name": "paymentTransactions"
    },
    {
      "name": "pluginsInfo"
    },
    {
      "name": "subscriptions"
    },
    {
      "name": "tagDefinitions"
    },
    {
      "name": "customFields"
    },
    {
      "name": "accounts"
    },
    {
      "name": "bundles"
    },
    {
      "name": "paymentMethods"
    },
    {
      "name": "paymentGateways"
    },
    {
      "name": "nodesInfo"
    },
    {
      "name": "credits"
    },
    {
      "name": "invoices"
    },
    {
      "name": "admin"
    },
    {
      "name": "security"
    },
    {
      "name": "catalog"
    },
    {
      "name": "usages"
    },
    {
      "name": "payments"
    },
    {
      "name": "overdue"
    }
  ],
  "paths": {
    "/api/v1/accounts": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve an account by external key",
        "description": "",
        "operationId": "getAccountByKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountWithBalance",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "accountWithBalanceAndCBA",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountJson"
            }
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Create account",
        "description": "",
        "operationId": "createAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccountJson"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account data supplied"
          }
        }
      }
    },
    "/api/v1/accounts/pagination": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "List accounts",
        "description": "",
        "operationId": "getAccounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "accountWithBalance",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "accountWithBalanceAndCBA",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/payments": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Trigger a payment using the account external key (authorization, purchase or credit)",
        "description": "",
        "operationId": "processPaymentByExternalKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "externalKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "400": {
            "description": "Invalid account external key supplied"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/accounts/search/{searchKey}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Search accounts",
        "description": "",
        "operationId": "searchAccounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchKey",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "accountWithBalance",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "accountWithBalanceAndCBA",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve an account by id",
        "description": "",
        "operationId": "getAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "accountWithBalance",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "accountWithBalanceAndCBA",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountJson"
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Update account",
        "description": "",
        "operationId": "updateAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccountJson"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "treatNullAsReset",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account data supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Close account",
        "description": "",
        "operationId": "closeAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "cancelAllSubscriptions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "writeOffUnpaidInvoices",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "itemAdjustUnpaidInvoices",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/allCustomFields": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account customFields",
        "description": "",
        "operationId": "getAllCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "objectType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACCOUNT",
              "ACCOUNT_EMAIL",
              "BLOCKING_STATES",
              "BUNDLE",
              "CUSTOM_FIELD",
              "INVOICE",
              "PAYMENT",
              "TRANSACTION",
              "INVOICE_ITEM",
              "INVOICE_PAYMENT",
              "SUBSCRIPTION",
              "SUBSCRIPTION_EVENT",
              "SERVICE_BROADCAST",
              "PAYMENT_ATTEMPT",
              "PAYMENT_METHOD",
              "REFUND",
              "TAG",
              "TAG_DEFINITION",
              "TENANT",
              "TENANT_KVS"
            ]
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/allTags": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account tags",
        "description": "",
        "operationId": "getAllTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "objectType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACCOUNT",
              "ACCOUNT_EMAIL",
              "BLOCKING_STATES",
              "BUNDLE",
              "CUSTOM_FIELD",
              "INVOICE",
              "PAYMENT",
              "TRANSACTION",
              "INVOICE_ITEM",
              "INVOICE_PAYMENT",
              "SUBSCRIPTION",
              "SUBSCRIPTION_EVENT",
              "SERVICE_BROADCAST",
              "PAYMENT_ATTEMPT",
              "PAYMENT_METHOD",
              "REFUND",
              "TAG",
              "TAG_DEFINITION",
              "TENANT",
              "TENANT_KVS"
            ]
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/block": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve blocking states for account",
        "description": "",
        "operationId": "getBlockingStates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "blockingStateTypes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SUBSCRIPTION",
                "SUBSCRIPTION_BUNDLE",
                "ACCOUNT"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "blockingStateSvcs",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockingStateJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      },
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Block an account",
        "description": "",
        "operationId": "addAccountBlockingState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlockingStateJson"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/bundles": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve bundles for account",
        "description": "",
        "operationId": "getAccountBundles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "externalKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "bundlesFilter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BundleJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/cbaRebalancing": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Rebalance account CBA",
        "description": "",
        "operationId": "rebalanceExistingCBAOnAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/children": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "List children accounts",
        "description": "",
        "operationId": "getChildrenAccounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "accountWithBalance",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "accountWithBalanceAndCBA",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountJson"
              }
            }
          },
          "400": {
            "description": "Invalid parent account id supplied"
          },
          "404": {
            "description": "Parent Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/customFields": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account custom fields",
        "description": "",
        "operationId": "getCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Add custom fields to account",
        "description": "",
        "operationId": "createCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Remove custom fields from account",
        "description": "",
        "operationId": "deleteCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "customFieldList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/emailNotifications": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account email notification",
        "description": "",
        "operationId": "getEmailNotificationsForAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvoiceEmailJson"
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Set account email notification",
        "description": "",
        "operationId": "setEmailNotificationsForAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InvoiceEmailJson"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/emails": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve an account emails",
        "description": "",
        "operationId": "getEmails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountEmailJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Add account email",
        "description": "",
        "operationId": "addEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccountEmailJson"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/emails/{email}": {
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Delete email from account",
        "description": "",
        "operationId": "removeEmail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/invoicePayments": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account invoice payments",
        "description": "",
        "operationId": "getInvoicePayments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withAttempts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoicePaymentJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Trigger a payment for all unpaid invoices",
        "description": "",
        "operationId": "payAllInvoices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "externalPayment",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "paymentAmount",
            "in": "query",
            "required": false,
            "type": "number"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/invoices": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account invoices",
        "description": "",
        "operationId": "getInvoices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "withItems",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withMigrationInvoices",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "unpaidInvoicesOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvoiceJson"
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/overdue": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve overdue state for account",
        "description": "",
        "operationId": "getOverdueAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OverdueStateJson"
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/paymentMethods": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account payment methods",
        "description": "",
        "operationId": "getPaymentMethods",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethodJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Add a payment method",
        "description": "",
        "operationId": "createPaymentMethod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentMethodJson"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "isDefault",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "payAllUnpaidInvoices",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/paymentMethods/refresh": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Refresh account payment methods",
        "description": "",
        "operationId": "refreshPaymentMethods",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "pluginName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/paymentMethods/{paymentMethodId}/setDefault": {
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Set the default payment method",
        "description": "",
        "operationId": "setDefaultPaymentMethod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "payAllUnpaidInvoices",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id or payment method id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/payments": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account payments",
        "description": "",
        "operationId": "getPayments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withAttempts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Trigger a payment (authorization, purchase or credit)",
        "description": "",
        "operationId": "processPayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/tags": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Add tags to account",
        "description": "",
        "operationId": "createTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Remove tags from account",
        "description": "",
        "operationId": "deleteTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied or account does not have a default payment method (AUTO_PAY_OFF tag only)"
          }
        }
      }
    },
    "/api/v1/accounts/{accountId}/timeline": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Retrieve account timeline",
        "description": "",
        "operationId": "getAccountTimeline",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "parallel",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountTimelineJson"
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/accounts/{childAccountId}/transferCredit": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Move a given child credit to the parent level",
        "description": "",
        "operationId": "transferChildCreditToParent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "childAccountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Account does not have credit"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/admin/cache": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Invalidates the given Cache if specified, otherwise invalidates all caches",
        "description": "",
        "operationId": "invalidatesCache",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cacheName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Cache name does not exist or is not alive"
          }
        }
      }
    },
    "/api/v1/admin/cache/accounts/{accountId}": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Invalidates Caches per account level",
        "description": "",
        "operationId": "invalidatesCacheByAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/admin/cache/tenants": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Invalidates Caches per tenant level",
        "description": "",
        "operationId": "invalidatesCacheByTenant",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tenantApiKey",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/admin/healthcheck": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Put the host out of rotation",
        "description": "",
        "operationId": "putInRotation",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Put the host out of rotation",
        "description": "",
        "operationId": "putOutOfRotation",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/admin/invoices": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Trigger an invoice generation for all parked accounts",
        "description": "",
        "operationId": "triggerInvoiceGenerationForParkedAccounts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/admin/payments/{paymentId}/transactions/{paymentTransactionId}": {
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Update existing paymentTransaction and associated payment state",
        "description": "",
        "operationId": "updatePaymentTransactionState",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AdminPaymentJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "paymentTransactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account data supplied"
          }
        }
      }
    },
    "/api/v1/admin/queues": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get queues entries",
        "description": "",
        "operationId": "getQueueEntries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "queueName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "withHistory",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "minDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "withInProcessing",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "withBusEvents",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "withNotifications",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/bundles": {
      "get": {
        "tags": [
          "bundles"
        ],
        "summary": "Retrieve a bundle by external key",
        "description": "",
        "operationId": "getBundleByKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BundleJson"
            }
          },
          "404": {
            "description": "Bundle not found"
          }
        }
      }
    },
    "/api/v1/bundles/pagination": {
      "get": {
        "tags": [
          "bundles"
        ],
        "summary": "List bundles",
        "description": "",
        "operationId": "getBundles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BundleJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/bundles/search/{searchKey}": {
      "get": {
        "tags": [
          "bundles"
        ],
        "summary": "Search bundles",
        "description": "",
        "operationId": "searchBundles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchKey",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BundleJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/bundles/{bundleId}": {
      "get": {
        "tags": [
          "bundles"
        ],
        "summary": "Retrieve a bundle by id",
        "description": "",
        "operationId": "getBundle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BundleJson"
            }
          },
          "400": {
            "description": "Invalid bundle id supplied"
          },
          "404": {
            "description": "Bundle not found"
          }
        }
      },
      "put": {
        "tags": [
          "bundles"
        ],
        "summary": "Transfer a bundle to another account",
        "description": "",
        "operationId": "transferBundle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BundleJson"
            }
          },
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingPolicy",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "END_OF_TERM"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid bundle id, requested date or policy supplied"
          },
          "404": {
            "description": "Bundle not found"
          }
        }
      }
    },
    "/api/v1/bundles/{bundleId}/block": {
      "put": {
        "tags": [
          "bundles"
        ],
        "summary": "Block a bundle",
        "description": "",
        "operationId": "addBundleBlockingState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlockingStateJson"
            }
          },
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid bundle id supplied"
          },
          "404": {
            "description": "Bundle not found"
          }
        }
      }
    },
    "/api/v1/bundles/{bundleId}/customFields": {
      "get": {
        "tags": [
          "bundles"
        ],
        "summary": "Retrieve bundle custom fields",
        "description": "",
        "operationId": "getCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          "400": {
            "description": "Invalid bundle id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "bundles"
        ],
        "summary": "Add custom fields to bundle",
        "description": "",
        "operationId": "createCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid bundle id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "bundles"
        ],
        "summary": "Remove custom fields from bundle",
        "description": "",
        "operationId": "deleteCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "customFieldList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid bundle id supplied"
          }
        }
      }
    },
    "/api/v1/bundles/{bundleId}/pause": {
      "put": {
        "tags": [
          "bundles"
        ],
        "summary": "Pause a bundle",
        "description": "",
        "operationId": "pauseBundle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid bundle id supplied"
          },
          "404": {
            "description": "Bundle not found"
          }
        }
      }
    },
    "/api/v1/bundles/{bundleId}/resume": {
      "put": {
        "tags": [
          "bundles"
        ],
        "summary": "Resume a bundle",
        "description": "",
        "operationId": "resumeBundle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid bundle id supplied"
          },
          "404": {
            "description": "Bundle not found"
          }
        }
      }
    },
    "/api/v1/bundles/{bundleId}/tags": {
      "get": {
        "tags": [
          "bundles"
        ],
        "summary": "Retrieve bundle tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          },
          "400": {
            "description": "Invalid bundle id supplied"
          },
          "404": {
            "description": "Bundle not found"
          }
        }
      },
      "post": {
        "tags": [
          "bundles"
        ],
        "summary": "Add tags to bundle",
        "description": "",
        "operationId": "createTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid bundle id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "bundles"
        ],
        "summary": "Remove tags from bundle",
        "description": "",
        "operationId": "deleteTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid bundle id supplied"
          }
        }
      }
    },
    "/api/v1/catalog": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Retrieve the catalog as JSON",
        "description": "",
        "operationId": "getCatalogJson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StaticCatalog"
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalog"
        ],
        "summary": "Upload the full catalog as XML",
        "description": "",
        "operationId": "uploadCatalogXml",
        "consumes": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/catalog/availableAddons": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Retrieve available add-ons for a given product",
        "description": "",
        "operationId": "getAvailableAddons",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "baseProductName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "priceListName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlanDetailJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/catalog/availableBasePlans": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Retrieve available base plans",
        "description": "",
        "operationId": "getAvailableBasePlans",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlanDetailJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/catalog/phase": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Retrieve phase for a given subscription and date",
        "description": "",
        "operationId": "getPhaseForSubscriptionAndDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PhaseJson"
            }
          }
        }
      }
    },
    "/api/v1/catalog/plan": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Retrieve plan for a given subscription and date",
        "description": "",
        "operationId": "getPlanForSubscriptionAndDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlanJson"
            }
          }
        }
      }
    },
    "/api/v1/catalog/priceList": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Retrieve priceList for a given subscription and date",
        "description": "",
        "operationId": "getPriceListForSubscriptionAndDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PriceListJson"
            }
          }
        }
      }
    },
    "/api/v1/catalog/product": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Retrieve product for a given subscription and date",
        "description": "",
        "operationId": "getProductForSubscriptionAndDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductJson"
            }
          }
        }
      }
    },
    "/api/v1/catalog/simplePlan": {
      "post": {
        "tags": [
          "catalog"
        ],
        "summary": "Upload the full catalog as XML",
        "description": "",
        "operationId": "addSimplePlan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SimplePlanJson"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/credits": {
      "post": {
        "tags": [
          "credits"
        ],
        "summary": "Create a credit",
        "description": "",
        "operationId": "createCredit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreditJson"
            }
          },
          {
            "name": "autoCommit",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/credits/{creditId}": {
      "get": {
        "tags": [
          "credits"
        ],
        "summary": "Retrieve a credit by id",
        "description": "",
        "operationId": "getCredit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "creditId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CreditJson"
            }
          },
          "400": {
            "description": "Invalid credit id supplied"
          },
          "404": {
            "description": "Credit not found"
          }
        }
      }
    },
    "/api/v1/customFields/pagination": {
      "get": {
        "tags": [
          "customFields"
        ],
        "summary": "List custom fields",
        "description": "",
        "operationId": "getCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/customFields/search/{searchKey}": {
      "get": {
        "tags": [
          "customFields"
        ],
        "summary": "Search custom fields",
        "description": "",
        "operationId": "searchCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchKey",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/export/{accountId}": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "Export account data",
        "description": "",
        "operationId": "exportDataForAccount",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/invoicePayments/{paymentId}": {
      "get": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Retrieve a payment by id",
        "description": "",
        "operationId": "getInvoicePayment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withAttempts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvoicePaymentJson"
            }
          },
          "400": {
            "description": "Invalid payment id supplied"
          },
          "404": {
            "description": "Payment not found"
          }
        }
      }
    },
    "/api/v1/invoicePayments/{paymentId}/chargebackReversals": {
      "post": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Record a chargebackReversal",
        "description": "",
        "operationId": "createChargebackReversal",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InvoicePaymentTransactionJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          },
          "404": {
            "description": "Account or payment not found"
          }
        }
      }
    },
    "/api/v1/invoicePayments/{paymentId}/chargebacks": {
      "post": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Record a chargeback",
        "description": "",
        "operationId": "createChargeback",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InvoicePaymentTransactionJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          },
          "404": {
            "description": "Account or payment not found"
          }
        }
      }
    },
    "/api/v1/invoicePayments/{paymentId}/customFields": {
      "get": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Retrieve payment custom fields",
        "description": "",
        "operationId": "getCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Add custom fields to payment",
        "description": "",
        "operationId": "createCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Remove custom fields from payment",
        "description": "",
        "operationId": "deleteCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "customFieldList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      }
    },
    "/api/v1/invoicePayments/{paymentId}/refunds": {
      "post": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Refund a payment, and adjust the invoice if needed",
        "description": "",
        "operationId": "createRefundWithAdjustments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InvoicePaymentTransactionJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "externalPayment",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          },
          "404": {
            "description": "Account or payment not found"
          }
        }
      }
    },
    "/api/v1/invoicePayments/{paymentId}/tags": {
      "get": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Retrieve payment tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          },
          "400": {
            "description": "Invalid payment id supplied"
          },
          "404": {
            "description": "Payment not found"
          }
        }
      },
      "post": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Add tags to payment",
        "description": "",
        "operationId": "createTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "invoicePayments"
        ],
        "summary": "Remove tags from payment",
        "description": "",
        "operationId": "deleteTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      }
    },
    "/api/v1/invoices": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Trigger an invoice generation",
        "description": "",
        "operationId": "createFutureInvoice",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvoiceJson"
            }
          },
          "400": {
            "description": "Invalid account id or target datetime supplied"
          }
        }
      }
    },
    "/api/v1/invoices/catalogTranslation/{locale}": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Upload the catalog translation for the tenant",
        "description": "",
        "operationId": "uploadCatalogTranslation",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "deleteIfExists",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/invoices/charges/{accountId}": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Create external charge(s)",
        "description": "",
        "operationId": "createExternalCharges",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IterableInvoiceItemJson"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "payInvoice",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "autoCommit",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "paymentExternalKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transactionExternalKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceItemJson"
              }
            }
          },
          "400": {
            "description": "Invalid account id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/invoices/dryRun": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Generate a dryRun invoice",
        "description": "",
        "operationId": "generateDryRunInvoice",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InvoiceDryRunJson"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvoiceJson"
            }
          },
          "400": {
            "description": "Invalid account id or target datetime supplied"
          }
        }
      }
    },
    "/api/v1/invoices/manualPayTemplate": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Upload the manualPay invoice template for the tenant",
        "description": "",
        "operationId": "uploadInvoiceMPTemplate",
        "consumes": [
          "text/html"
        ],
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleteIfExists",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/invoices/migration/{accountId}": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Create a migration invoice",
        "description": "",
        "operationId": "createMigrationInvoice",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IterableInvoiceItemJson"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "targetDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvoiceJson"
            }
          },
          "400": {
            "description": "Invalid account id or target datetime supplied"
          }
        }
      }
    },
    "/api/v1/invoices/pagination": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "List invoices",
        "description": "",
        "operationId": "getInvoices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "withItems",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/invoices/search/{searchKey}": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Search invoices",
        "description": "",
        "operationId": "searchInvoices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchKey",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "withItems",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/invoices/template": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Upload the invoice template for the tenant",
        "description": "",
        "operationId": "uploadInvoiceTemplate",
        "consumes": [
          "text/html"
        ],
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleteIfExists",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/invoices/translation/{locale}": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Upload the invoice translation for the tenant",
        "description": "",
        "operationId": "uploadInvoiceTranslation",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "deleteIfExists",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/invoices/{invoiceId}": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Retrieve an invoice by id",
        "description": "",
        "operationId": "getInvoice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "withItems",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withChildrenItems",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvoiceJson"
            }
          },
          "400": {
            "description": "Invalid invoice id supplied"
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Adjust an invoice item",
        "description": "",
        "operationId": "adjustInvoiceItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InvoiceItemJson"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id, invoice id or invoice item id supplied"
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      }
    },
    "/api/v1/invoices/{invoiceId}/commitInvoice": {
      "put": {
        "tags": [
          "invoices"
        ],
        "summary": "Perform the invoice status transition from DRAFT to COMMITTED",
        "description": "",
        "operationId": "commitInvoice",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Invoice not found"
          }
        }
      }
    },
    "/api/v1/invoices/{invoiceId}/customFields": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Retrieve invoice custom fields",
        "description": "",
        "operationId": "getCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          "400": {
            "description": "Invalid invoice id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Add custom fields to invoice",
        "description": "",
        "operationId": "createCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid invoice id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "invoices"
        ],
        "summary": "Remove custom fields from invoice",
        "description": "",
        "operationId": "deleteCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "customFieldList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid invoice id supplied"
          }
        }
      }
    },
    "/api/v1/invoices/{invoiceId}/emailNotifications": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Trigger an email notification for invoice",
        "description": "",
        "operationId": "triggerEmailNotificationForInvoice",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid invoice id supplied"
          },
          "404": {
            "description": "Account or invoice not found"
          }
        }
      }
    },
    "/api/v1/invoices/{invoiceId}/html": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Render an invoice as HTML",
        "description": "",
        "operationId": "getInvoiceAsHTML",
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      }
    },
    "/api/v1/invoices/{invoiceId}/payments": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Retrieve payments associated with an invoice",
        "description": "",
        "operationId": "getPayments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withAttempts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoicePaymentJson"
              }
            }
          },
          "400": {
            "description": "Invalid invoice id supplied"
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Trigger a payment for invoice",
        "description": "",
        "operationId": "createInstantPayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InvoicePaymentJson"
            }
          },
          {
            "name": "externalPayment",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id or invoice id supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/invoices/{invoiceId}/tags": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Retrieve invoice tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          },
          "400": {
            "description": "Invalid invoice id supplied"
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Add tags to invoice",
        "description": "",
        "operationId": "createTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid invoice id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "invoices"
        ],
        "summary": "Remove tags from invoice",
        "description": "",
        "operationId": "deleteTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid invoice id supplied"
          }
        }
      }
    },
    "/api/v1/invoices/{invoiceId}/{invoiceItemId}/cba": {
      "delete": {
        "tags": [
          "invoices"
        ],
        "summary": "Delete a CBA item",
        "description": "",
        "operationId": "deleteCBA",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "invoiceItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid account id, invoice id or invoice item id supplied"
          },
          "404": {
            "description": "Account or invoice not found"
          }
        }
      }
    },
    "/api/v1/invoices/{invoiceNumber}": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Retrieve an invoice by number",
        "description": "",
        "operationId": "getInvoiceByNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceNumber",
            "in": "path",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          },
          {
            "name": "withItems",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withChildrenItems",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvoiceJson"
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      }
    },
    "/api/v1/nodesInfo": {
      "get": {
        "tags": [
          "nodesInfo"
        ],
        "summary": "Retrieve all the nodes infos",
        "description": "",
        "operationId": "getNodesInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PluginInfoJson"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "nodesInfo"
        ],
        "summary": "Trigger a node command",
        "description": "",
        "operationId": "triggerNodeCommand",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NodeCommandJson"
            }
          },
          {
            "name": "localNodeOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid node command supplied"
          }
        }
      }
    },
    "/api/v1/overdue": {
      "get": {
        "tags": [
          "overdue"
        ],
        "summary": "Retrieve the overdue config as JSON",
        "description": "",
        "operationId": "getOverdueConfigJson",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OverdueJson"
            }
          }
        }
      },
      "post": {
        "tags": [
          "overdue"
        ],
        "summary": "Upload the full overdue config as JSON",
        "description": "",
        "operationId": "uploadOverdueConfigJson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OverdueJson"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/paymentGateways/hosted/form": {
      "post": {
        "tags": [
          "paymentGateways"
        ],
        "summary": "Combo API to generate form data to redirect the customer to the gateway",
        "description": "",
        "operationId": "buildComboFormDescriptor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ComboHostedPaymentPageJson"
            }
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HostedPaymentPageFormDescriptorJson"
            }
          },
          "400": {
            "description": "Invalid data for Account or PaymentMethod"
          }
        }
      }
    },
    "/api/v1/paymentGateways/hosted/form/{accountId}": {
      "post": {
        "tags": [
          "paymentGateways"
        ],
        "summary": "Generate form data to redirect the customer to the gateway",
        "description": "",
        "operationId": "buildFormDescriptor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HostedPaymentPageFieldsJson"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "paymentMethodId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HostedPaymentPageFormDescriptorJson"
            }
          },
          "400": {
            "description": "Invalid accountId supplied"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v1/paymentGateways/notification/{pluginName}": {
      "post": {
        "tags": [
          "paymentGateways"
        ],
        "summary": "Process a gateway notification",
        "description": "The response is built by the appropriate plugin",
        "operationId": "processNotification",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pluginName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/paymentMethods": {
      "get": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "Retrieve a payment method by external key",
        "description": "",
        "operationId": "getPaymentMethodByKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMethodJson"
            }
          },
          "404": {
            "description": "Account or payment method not found"
          }
        }
      }
    },
    "/api/v1/paymentMethods/pagination": {
      "get": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "List payment methods",
        "description": "",
        "operationId": "getPaymentMethods",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "pluginName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethodJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/paymentMethods/search/{searchKey}": {
      "get": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "Search payment methods",
        "description": "",
        "operationId": "searchPaymentMethods",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchKey",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "pluginName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethodJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/paymentMethods/{paymentMethodId}": {
      "get": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "Retrieve a payment method by id",
        "description": "",
        "operationId": "getPaymentMethod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMethodJson"
            }
          },
          "400": {
            "description": "Invalid paymentMethodId supplied"
          },
          "404": {
            "description": "Account or payment method not found"
          }
        }
      },
      "delete": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "Delete a payment method",
        "description": "",
        "operationId": "deletePaymentMethod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "deleteDefaultPmWithAutoPayOff",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "forceDefaultPmDeletion",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid paymentMethodId supplied"
          },
          "404": {
            "description": "Account or payment method not found"
          }
        }
      }
    },
    "/api/v1/paymentMethods/{paymentMethodId}/customFields": {
      "get": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "Retrieve payment method custom fields",
        "description": "",
        "operationId": "getCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          "400": {
            "description": "Invalid payment method id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "Add custom fields to payment method",
        "description": "",
        "operationId": "createCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment method id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "Remove custom fields from payment method",
        "description": "",
        "operationId": "deleteCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "customFieldList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment method id supplied"
          }
        }
      }
    },
    "/api/v1/paymentTransactions/{transactionId}": {
      "get": {
        "tags": [
          "paymentTransactions"
        ],
        "summary": "Retrieve a payment by transaction id",
        "description": "",
        "operationId": "getPaymentByTransactionId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withAttempts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentJson"
            }
          },
          "404": {
            "description": "Payment not found"
          }
        }
      },
      "post": {
        "tags": [
          "paymentTransactions"
        ],
        "summary": "Mark a pending payment transaction as succeeded or failed",
        "description": "",
        "operationId": "notifyStateChanged",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid paymentId supplied"
          },
          "404": {
            "description": "Account or Payment not found"
          }
        }
      }
    },
    "/api/v1/paymentTransactions/{transactionId}/customFields": {
      "get": {
        "tags": [
          "paymentTransactions"
        ],
        "summary": "Retrieve payment transaction custom fields",
        "description": "",
        "operationId": "getCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          "400": {
            "description": "Invalid transaction id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "paymentTransactions"
        ],
        "summary": "Add custom fields to payment transaction",
        "description": "",
        "operationId": "createCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid transaction id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "paymentTransactions"
        ],
        "summary": "Remove custom fields from payment transaction",
        "description": "",
        "operationId": "deleteCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "customFieldList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid transaction id supplied"
          }
        }
      }
    },
    "/api/v1/paymentTransactions/{transactionId}/tags": {
      "get": {
        "tags": [
          "paymentTransactions"
        ],
        "summary": "Retrieve payment transaction tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          },
          "400": {
            "description": "Invalid transaction id supplied"
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "post": {
        "tags": [
          "paymentTransactions"
        ],
        "summary": "Add tags to payment transaction",
        "description": "",
        "operationId": "createTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid transaction id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "paymentTransactions"
        ],
        "summary": "Remove tags from payment transaction",
        "description": "",
        "operationId": "deleteTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid transaction id supplied"
          }
        }
      }
    },
    "/api/v1/payments": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Retrieve a payment by external key",
        "description": "",
        "operationId": "getPaymentByExternalKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withAttempts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "externalKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentJson"
            }
          },
          "404": {
            "description": "Payment not found"
          }
        }
      },
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Capture an existing authorization",
        "description": "",
        "operationId": "captureAuthorizationByExternalKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      },
      "put": {
        "tags": [
          "payments"
        ],
        "summary": "Complete an existing transaction",
        "description": "",
        "operationId": "completeTransactionByExternalKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      },
      "delete": {
        "tags": [
          "payments"
        ],
        "summary": "Void an existing payment",
        "description": "",
        "operationId": "voidPaymentByExternalKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/payments/cancelScheduledPaymentTransaction": {
      "delete": {
        "tags": [
          "payments"
        ],
        "summary": "Cancels a scheduled payment attempt retry",
        "description": "",
        "operationId": "cancelScheduledPaymentTransactionByExternalKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionExternalKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid paymentTransactionExternalKey supplied"
          }
        }
      }
    },
    "/api/v1/payments/chargebackReversals": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Record a chargeback reversal",
        "description": "",
        "operationId": "chargebackReversalPaymentByExternalKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/payments/chargebacks": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Record a chargeback",
        "description": "",
        "operationId": "chargebackPaymentByExternalKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/payments/combo": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Combo api to create a new payment transaction on a existing (or not) account ",
        "description": "",
        "operationId": "createComboPayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ComboPaymentTransactionJson"
            }
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "400": {
            "description": "Invalid data for Account or PaymentMethod"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/payments/pagination": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Get payments",
        "description": "",
        "operationId": "getPayments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "pluginName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withAttempts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/refunds": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Refund an existing payment",
        "description": "",
        "operationId": "refundPaymentByExternalKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/payments/search/{searchKey}": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Search payments",
        "description": "",
        "operationId": "searchPayments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchKey",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "pluginName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withAttempts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/{paymentId}": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Retrieve a payment by id",
        "description": "",
        "operationId": "getPayment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "withPluginInfo",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "withAttempts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentJson"
            }
          },
          "400": {
            "description": "Invalid paymentId supplied"
          },
          "404": {
            "description": "Payment not found"
          }
        }
      },
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Capture an existing authorization",
        "description": "",
        "operationId": "captureAuthorization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "400": {
            "description": "Invalid paymentId supplied"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      },
      "put": {
        "tags": [
          "payments"
        ],
        "summary": "Complete an existing transaction",
        "description": "",
        "operationId": "completeTransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "400": {
            "description": "Invalid paymentId supplied"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      },
      "delete": {
        "tags": [
          "payments"
        ],
        "summary": "Void an existing payment",
        "description": "",
        "operationId": "voidPayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "400": {
            "description": "Invalid paymentId supplied"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/payments/{paymentId}/chargebackReversals": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Record a chargeback reversal",
        "description": "",
        "operationId": "chargebackReversalPayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "400": {
            "description": "Invalid paymentId supplied"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/payments/{paymentId}/chargebacks": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Record a chargeback",
        "description": "",
        "operationId": "chargebackPayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "400": {
            "description": "Invalid paymentId supplied"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/payments/{paymentId}/customFields": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Retrieve payment custom fields",
        "description": "",
        "operationId": "getCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Add custom fields to payment",
        "description": "",
        "operationId": "createCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "payments"
        ],
        "summary": "Remove custom fields from payment payment",
        "description": "",
        "operationId": "deleteCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "customFieldList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      }
    },
    "/api/v1/payments/{paymentId}/refunds": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Refund an existing payment",
        "description": "",
        "operationId": "refundPayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionJson"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "controlPluginName",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Payment transaction created successfully"
          },
          "400": {
            "description": "Invalid paymentId supplied"
          },
          "422": {
            "description": "Payment is aborted by a control plugin"
          },
          "402": {
            "description": "Transaction declined by gateway"
          },
          "502": {
            "description": "Failed to submit payment transaction"
          },
          "404": {
            "description": "Account or payment not found"
          },
          "503": {
            "description": "Payment in unknown status, failed to receive gateway response"
          },
          "504": {
            "description": "Payment operation timeout"
          }
        }
      }
    },
    "/api/v1/payments/{paymentId}/tags": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Retrieve payment payment tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          },
          "400": {
            "description": "Invalid payment id supplied"
          },
          "404": {
            "description": "Invoice not found"
          }
        }
      },
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Add tags to payment payment",
        "description": "",
        "operationId": "createTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "payments"
        ],
        "summary": "Remove tags from payment payment",
        "description": "",
        "operationId": "deleteTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid payment id supplied"
          }
        }
      }
    },
    "/api/v1/payments/{paymentTransactionId}/cancelScheduledPaymentTransaction": {
      "delete": {
        "tags": [
          "payments"
        ],
        "summary": "Cancels a scheduled payment attempt retry",
        "description": "",
        "operationId": "cancelScheduledPaymentTransactionById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentTransactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid paymentTransactionId supplied"
          }
        }
      }
    },
    "/api/v1/pluginsInfo": {
      "get": {
        "tags": [
          "pluginsInfo"
        ],
        "summary": "Retrieve the list of registered plugins",
        "description": "",
        "operationId": "getPluginsInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PluginInfoJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/security/permissions": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "List user permissions",
        "description": "",
        "operationId": "getCurrentUserPermissions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/api/v1/security/roles": {
      "post": {
        "tags": [
          "security"
        ],
        "summary": "Add a new role definition)",
        "description": "",
        "operationId": "addRoleDefinition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleDefinitionJson"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/security/subject": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get user information",
        "description": "",
        "operationId": "getCurrentUserSubject",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubjectJson"
            }
          }
        }
      }
    },
    "/api/v1/security/users": {
      "post": {
        "tags": [
          "security"
        ],
        "summary": "Add a new user with roles (to make api requests)",
        "description": "",
        "operationId": "addUserRoles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserRolesJson"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/security/users/{username}": {
      "delete": {
        "tags": [
          "security"
        ],
        "summary": "Invalidate an existing user",
        "description": "",
        "operationId": "invalidateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/security/users/{username}/password": {
      "put": {
        "tags": [
          "security"
        ],
        "summary": "Update a user password",
        "description": "",
        "operationId": "updateUserPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserRolesJson"
            }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/security/users/{username}/roles": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get roles associated to a user",
        "description": "",
        "operationId": "getUserRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "security"
        ],
        "summary": "Update roles associated to a user",
        "description": "",
        "operationId": "updateUserRoles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserRolesJson"
            }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/subscriptions": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Create an entitlement",
        "description": "",
        "operationId": "createEntitlement",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscriptionJson"
            }
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entitlementDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "migrated",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "bcd",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "callCompletion",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "callTimeoutSec",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 3,
            "format": "int64"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid entitlement supplied"
          }
        }
      }
    },
    "/api/v1/subscriptions/createEntitlementWithAddOns": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Create an entitlement with addOn products",
        "description": "",
        "operationId": "createEntitlementWithAddOns",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionJson"
              }
            }
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entitlementDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "migrated",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "callCompletion",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "callTimeoutSec",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 3,
            "format": "int64"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid entitlement supplied"
          }
        }
      }
    },
    "/api/v1/subscriptions/createEntitlementsWithAddOns": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Create multiple entitlements with addOn products",
        "description": "",
        "operationId": "createEntitlementsWithAddOns",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkBaseSubscriptionAndAddOnsJson"
              }
            }
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entitlementDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "migrated",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "callCompletion",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "callTimeoutSec",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 3,
            "format": "int64"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid entitlements supplied"
          }
        }
      }
    },
    "/api/v1/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Retrieve a subscription by id",
        "description": "",
        "operationId": "getEntitlement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionJson"
            }
          },
          "400": {
            "description": "Invalid subscription id supplied"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      },
      "put": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Change entitlement plan",
        "description": "",
        "operationId": "changeEntitlementPlan",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscriptionJson"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "callCompletion",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "callTimeoutSec",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 3,
            "format": "int64"
          },
          {
            "name": "billingPolicy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subscription id supplied"
          },
          "404": {
            "description": "Entitlement not found"
          }
        }
      },
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Cancel an entitlement plan",
        "description": "",
        "operationId": "cancelEntitlementPlan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "callCompletion",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "callTimeoutSec",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 5,
            "format": "int64"
          },
          {
            "name": "entitlementPolicy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingPolicy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useRequestedDateForBilling",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subscription id supplied"
          },
          "404": {
            "description": "Entitlement not found"
          }
        }
      }
    },
    "/api/v1/subscriptions/{subscriptionId}/bcd": {
      "put": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Update the BCD associated to a subscription",
        "description": "",
        "operationId": "updateSubscriptionBCD",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscriptionJson"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "effectiveFromDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forceNewBcdWithPastEffectiveDate",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid entitlement supplied"
          }
        }
      }
    },
    "/api/v1/subscriptions/{subscriptionId}/block": {
      "put": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Block a subscription",
        "description": "",
        "operationId": "addSubscriptionBlockingState",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlockingStateJson"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "requestedDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subscription id supplied"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      }
    },
    "/api/v1/subscriptions/{subscriptionId}/customFields": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Retrieve subscription custom fields",
        "description": "",
        "operationId": "getCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          "400": {
            "description": "Invalid subscription id supplied"
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Add custom fields to subscription",
        "description": "",
        "operationId": "createCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldJson"
              }
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subscription id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Remove custom fields from subscription",
        "description": "",
        "operationId": "deleteCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "customFieldList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subscription id supplied"
          }
        }
      }
    },
    "/api/v1/subscriptions/{subscriptionId}/tags": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Retrieve subscription tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          },
          {
            "name": "includedDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          },
          "400": {
            "description": "Invalid subscription id supplied"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Add tags to subscription",
        "description": "",
        "operationId": "createTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subscription id supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Remove tags from subscription",
        "description": "",
        "operationId": "deleteTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "tagList",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subscription id supplied"
          }
        }
      }
    },
    "/api/v1/subscriptions/{subscriptionId}/uncancel": {
      "put": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Un-cancel an entitlement",
        "description": "",
        "operationId": "uncancelEntitlementPlan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "pluginProperty",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subscription id supplied"
          },
          "404": {
            "description": "Entitlement not found"
          }
        }
      }
    },
    "/api/v1/tagDefinitions": {
      "get": {
        "tags": [
          "tagDefinitions"
        ],
        "summary": "List tag definitions",
        "description": "",
        "operationId": "getTagDefinitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagDefinitionJson"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tagDefinitions"
        ],
        "summary": "Create a tag definition",
        "description": "",
        "operationId": "createTagDefinition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TagDefinitionJson"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid name or description supplied"
          }
        }
      }
    },
    "/api/v1/tagDefinitions/{tagDefinitionId}": {
      "get": {
        "tags": [
          "tagDefinitions"
        ],
        "summary": "Retrieve a tag definition",
        "description": "",
        "operationId": "getTagDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagDefinitionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TagDefinitionJson"
            }
          },
          "400": {
            "description": "Invalid tagDefinitionId supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "tagDefinitions"
        ],
        "summary": "Delete a tag definition",
        "description": "",
        "operationId": "deleteTagDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagDefinitionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tagDefinitionId supplied"
          }
        }
      }
    },
    "/api/v1/tags/pagination": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "List tags",
        "description": "",
        "operationId": "getTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/tags/search/{searchKey}": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Search tags",
        "description": "",
        "operationId": "searchTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchKey",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int64"
          },
          {
            "name": "audit",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "NONE"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagJson"
              }
            }
          }
        }
      }
    },
    "/api/v1/tenants": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Retrieve a tenant by its API key",
        "description": "",
        "operationId": "getTenantByApiKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TenantJson"
            }
          },
          "404": {
            "description": "Tenant not found"
          }
        }
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Create a tenant",
        "description": "",
        "operationId": "createTenant",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TenantJson"
            }
          },
          {
            "name": "useGlobalDefault",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Tenant already exists"
          }
        }
      }
    },
    "/api/v1/tenants/registerNotificationCallback": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Retrieve a push notification",
        "description": "",
        "operationId": "getPushNotificationCallbacks",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TenantKeyJson"
            }
          },
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Create a push notification",
        "description": "",
        "operationId": "registerPushNotificationCallback",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cb",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Delete a push notification",
        "description": "",
        "operationId": "deletePushNotificationCallbacks",
        "parameters": [
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      }
    },
    "/api/v1/tenants/uploadPerTenantConfig": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Retrieve a per tenant configuration (system properties)",
        "description": "",
        "operationId": "getPerTenantConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TenantKeyJson"
            }
          },
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Add a per tenant configuration (system properties)",
        "description": "",
        "operationId": "uploadPerTenantConfiguration",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Delete a per tenant configuration (system properties)",
        "description": "",
        "operationId": "deletePerTenantConfiguration",
        "parameters": [
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      }
    },
    "/api/v1/tenants/uploadPerTenantConfig/{keyPrefix}/search": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Retrieve a per tenant key value based on key prefix",
        "description": "",
        "operationId": "getAllPluginConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyPrefix",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TenantKeyJson"
            }
          },
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      }
    },
    "/api/v1/tenants/uploadPluginConfig/{pluginName}": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Retrieve a per tenant configuration for a plugin",
        "description": "",
        "operationId": "getPluginConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pluginName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TenantKeyJson"
            }
          },
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Add a per tenant configuration for a plugin",
        "description": "",
        "operationId": "uploadPluginConfiguration",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pluginName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Delete a per tenant configuration for a plugin",
        "description": "",
        "operationId": "deletePluginConfiguration",
        "parameters": [
          {
            "name": "pluginName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      }
    },
    "/api/v1/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Retrieve a per tenant payment state machine for a plugin",
        "description": "",
        "operationId": "getPluginPaymentStateMachineConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pluginName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TenantKeyJson"
            }
          },
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Add a per tenant payment state machine for a plugin",
        "description": "",
        "operationId": "uploadPluginPaymentStateMachineConfig",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pluginName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Delete a per tenant payment state machine for a plugin",
        "description": "",
        "operationId": "deletePluginPaymentStateMachineConfig",
        "parameters": [
          {
            "name": "pluginName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      }
    },
    "/api/v1/tenants/userKeyValue/{keyName}": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Retrieve a per tenant user key/value",
        "description": "",
        "operationId": "getUserKeyValue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TenantKeyJson"
            }
          },
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Add a per tenant user key/value",
        "description": "",
        "operationId": "insertUserKeyValue",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keyName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Delete  a per tenant user key/value",
        "description": "",
        "operationId": "deleteUserKeyValue",
        "parameters": [
          {
            "name": "keyName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".*"
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid tenantId supplied"
          }
        }
      }
    },
    "/api/v1/tenants/{tenantId}": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Retrieve a tenant by id",
        "description": "",
        "operationId": "getTenant",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TenantJson"
            }
          },
          "400": {
            "description": "Invalid tenantId supplied"
          },
          "404": {
            "description": "Tenant not found"
          }
        }
      }
    },
    "/api/v1/usages": {
      "post": {
        "tags": [
          "usages"
        ],
        "summary": "Record usage for a subscription",
        "description": "",
        "operationId": "recordUsage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscriptionUsageRecordJson"
            }
          },
          {
            "name": "X-GoBilling-CreatedBy",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Reason",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-GoBilling-Comment",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subscription (e.g. inactive)"
          }
        }
      }
    },
    "/api/v1/usages/{subscriptionId}": {
      "get": {
        "tags": [
          "usages"
        ],
        "summary": "Retrieve usage for a subscription",
        "description": "",
        "operationId": "getAllUsage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RolledUpUsageJson"
            }
          },
          "400": {
            "description": "Missing start date or end date"
          }
        }
      }
    },
    "/api/v1/usages/{subscriptionId}/{unitType}": {
      "get": {
        "tags": [
          "usages"
        ],
        "summary": "Retrieve usage for a subscription and unit type",
        "description": "",
        "operationId": "getUsage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "\\w+-\\w+-\\w+-\\w+-\\w+"
          },
          {
            "name": "unitType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RolledUpUsageJson"
            }
          },
          "400": {
            "description": "Missing start date or end date"
          }
        }
      }
    }
  },
  "definitions": {
    "TenantJson": {
      "type": "object",
      "required": [
        "apiKey",
        "apiSecret"
      ],
      "properties": {
        "tenantId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "externalKey": {
          "type": "string",
          "readOnly": true
        },
        "apiKey": {
          "type": "string",
          "readOnly": true
        },
        "apiSecret": {
          "type": "string",
          "readOnly": true
        },
        "auditLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "OverdueStateJson": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "externalMessage": {
          "type": "string",
          "readOnly": true
        },
        "daysBetweenPaymentRetries": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "disableEntitlementAndChangesBlocked": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "blockChanges": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "clearState": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "reevaluationIntervalDays": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        }
      }
    },
    "InvoicePaymentJson": {
      "type": "object",
      "properties": {
        "targetInvoiceId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "paymentId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "paymentNumber": {
          "type": "string",
          "readOnly": true
        },
        "paymentExternalKey": {
          "type": "string",
          "readOnly": true
        },
        "authAmount": {
          "type": "number",
          "readOnly": true
        },
        "capturedAmount": {
          "type": "number",
          "readOnly": true
        },
        "purchasedAmount": {
          "type": "number",
          "readOnly": true
        },
        "refundedAmount": {
          "type": "number",
          "readOnly": true
        },
        "creditedAmount": {
          "type": "number",
          "readOnly": true
        },
        "currency": {
          "type": "string",
          "readOnly": true
        },
        "paymentMethodId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "transactions": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PaymentTransactionJson"
          }
        },
        "paymentAttempts": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PaymentAttemptJson"
          }
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "HostedPaymentPageFormDescriptorJson": {
      "type": "object",
      "properties": {
        "kbAccountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "formMethod": {
          "type": "string",
          "readOnly": true
        },
        "formUrl": {
          "type": "string",
          "readOnly": true
        },
        "formFields": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "object"
          }
        },
        "properties": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "object"
          }
        },
        "auditLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "PriceJson": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "InternationalPrice": {
      "type": "object",
      "properties": {
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Price"
          }
        },
        "zero": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "enum": [
            "BASE",
            "ADD_ON",
            "STANDALONE"
          ]
        },
        "included": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "available": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "limits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Limit"
          }
        },
        "catalogName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "EventSubscriptionJson": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string",
          "readOnly": true
        },
        "billingPeriod": {
          "type": "string",
          "readOnly": true
        },
        "effectiveDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "plan": {
          "type": "string",
          "readOnly": true
        },
        "product": {
          "type": "string",
          "readOnly": true
        },
        "priceList": {
          "type": "string",
          "readOnly": true
        },
        "eventType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "START_ENTITLEMENT",
            "START_BILLING",
            "PAUSE_ENTITLEMENT",
            "PAUSE_BILLING",
            "RESUME_ENTITLEMENT",
            "RESUME_BILLING",
            "PHASE",
            "CHANGE",
            "STOP_ENTITLEMENT",
            "STOP_BILLING",
            "SERVICE_STATE_CHANGE"
          ]
        },
        "isBlockedBilling": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "isBlockedEntitlement": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "serviceName": {
          "type": "string",
          "readOnly": true
        },
        "serviceStateName": {
          "type": "string",
          "readOnly": true
        },
        "phase": {
          "type": "string",
          "readOnly": true
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "AdminPaymentJson": {
      "type": "object",
      "properties": {
        "lastSuccessPaymentState": {
          "type": "string",
          "readOnly": true
        },
        "currentPaymentStateName": {
          "type": "string",
          "readOnly": true
        },
        "transactionStatus": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TenantKeyJson": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreditJson": {
      "type": "object",
      "required": [
        "accountId",
        "creditAmount"
      ],
      "properties": {
        "creditAmount": {
          "type": "number",
          "readOnly": true
        },
        "currency": {
          "type": "string",
          "readOnly": true
        },
        "invoiceId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "invoiceNumber": {
          "type": "string",
          "readOnly": true
        },
        "effectiveDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "BlockingStateJson": {
      "type": "object",
      "properties": {
        "blockedId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "stateName": {
          "type": "string",
          "readOnly": true
        },
        "service": {
          "type": "string",
          "readOnly": true
        },
        "blockChange": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "blockEntitlement": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "blockBilling": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "SUBSCRIPTION",
            "SUBSCRIPTION_BUNDLE",
            "ACCOUNT"
          ]
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "Unit": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "AccountJson": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "firstNameLength": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "externalKey": {
          "type": "string",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "readOnly": true
        },
        "billCycleDayLocal": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "currency": {
          "type": "string",
          "readOnly": true
        },
        "parentAccountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "isPaymentDelegatedToParent": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "paymentMethodId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "timeZone": {
          "type": "string",
          "readOnly": true
        },
        "address1": {
          "type": "string",
          "readOnly": true
        },
        "address2": {
          "type": "string",
          "readOnly": true
        },
        "postalCode": {
          "type": "string",
          "readOnly": true
        },
        "company": {
          "type": "string",
          "readOnly": true
        },
        "city": {
          "type": "string",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "readOnly": true
        },
        "country": {
          "type": "string",
          "readOnly": true
        },
        "locale": {
          "type": "string",
          "readOnly": true
        },
        "phone": {
          "type": "string",
          "readOnly": true
        },
        "notes": {
          "type": "string",
          "readOnly": true
        },
        "isMigrated": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "isNotifiedForInvoices": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "accountBalance": {
          "type": "number",
          "readOnly": true
        },
        "accountCBA": {
          "type": "number",
          "readOnly": true
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "NodeCommandPropertyJson": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "object",
          "readOnly": true
        }
      }
    },
    "AccountEmailJson": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "readOnly": true
        },
        "auditLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "OverdueStateConfigJson": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "isClearState": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "condition": {
          "readOnly": true,
          "$ref": "#/definitions/OverdueConditionJson"
        },
        "externalMessage": {
          "type": "string",
          "readOnly": true
        },
        "blockChanges": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "disableEntitlement": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "subscriptionCancellationPolicy": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "END_OF_TERM",
            "IMMEDIATE",
            "NONE"
          ]
        },
        "autoReevaluationIntervalDays": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        }
      }
    },
    "InvoiceEmailJson": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "isNotifiedForInvoices": {
          "type": "boolean",
          "default": false
        },
        "auditLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "InvoiceJson": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "readOnly": true
        },
        "currency": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "creditAdj": {
          "type": "number",
          "readOnly": true
        },
        "refundAdj": {
          "type": "number",
          "readOnly": true
        },
        "invoiceId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "invoiceDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "targetDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "invoiceNumber": {
          "type": "string",
          "readOnly": true
        },
        "balance": {
          "type": "number",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "bundleKeys": {
          "type": "string",
          "readOnly": true
        },
        "credits": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/CreditJson"
          }
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/InvoiceItemJson"
          }
        },
        "isParentInvoice": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "CustomFieldJson": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "customFieldId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "objectId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "objectType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ACCOUNT",
            "ACCOUNT_EMAIL",
            "BLOCKING_STATES",
            "BUNDLE",
            "CUSTOM_FIELD",
            "INVOICE",
            "PAYMENT",
            "TRANSACTION",
            "INVOICE_ITEM",
            "INVOICE_PAYMENT",
            "SUBSCRIPTION",
            "SUBSCRIPTION_EVENT",
            "SERVICE_BROADCAST",
            "PAYMENT_ATTEMPT",
            "PAYMENT_METHOD",
            "REFUND",
            "TAG",
            "TAG_DEFINITION",
            "TENANT",
            "TENANT_KVS"
          ]
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "readOnly": true
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "UsageJson": {
      "type": "object",
      "properties": {
        "billingPeriod": {
          "type": "string",
          "readOnly": true
        },
        "tiers": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TierJson"
          }
        }
      }
    },
    "InvoicePaymentTransactionJson": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "transactionExternalKey": {
          "type": "string",
          "readOnly": true
        },
        "paymentId": {
          "type": "string",
          "format": "uuid",
          "description": "Associated payment id, required when notifying state transitions",
          "readOnly": true
        },
        "paymentExternalKey": {
          "type": "string",
          "readOnly": true
        },
        "transactionType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "AUTHORIZE",
            "CAPTURE",
            "CHARGEBACK",
            "CREDIT",
            "PURCHASE",
            "REFUND",
            "VOID"
          ]
        },
        "amount": {
          "type": "number",
          "description": "Transaction amount, required except for void operations",
          "readOnly": true
        },
        "currency": {
          "type": "string",
          "description": "Amount currency (account currency unless specified)",
          "readOnly": true,
          "enum": [
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BYR",
            "BZD",
            "CAD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EGP",
            "ERN",
            "ETB",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GGP",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "IMP",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JEP",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SPL",
            "SRD",
            "STD",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRY",
            "TTD",
            "TVD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XCD",
            "XDR",
            "XOF",
            "XPF",
            "YER",
            "ZAR",
            "ZMW",
            "ZWD",
            "BTC"
          ]
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "processedAmount": {
          "type": "number",
          "readOnly": true
        },
        "processedCurrency": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Transaction status, required for state change notifications",
          "readOnly": true,
          "enum": [
            "SUCCESS",
            "UNKNOWN",
            "PENDING",
            "PAYMENT_FAILURE",
            "PLUGIN_FAILURE",
            "PAYMENT_SYSTEM_OFF"
          ]
        },
        "gatewayErrorCode": {
          "type": "string",
          "readOnly": true
        },
        "gatewayErrorMsg": {
          "type": "string",
          "readOnly": true
        },
        "firstPaymentReferenceId": {
          "type": "string",
          "readOnly": true
        },
        "secondPaymentReferenceId": {
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PluginPropertyJson"
          }
        },
        "isAdjusted": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "adjustments": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/InvoiceItemJson"
          }
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      },
      "description": "Payment transaction"
    },
    "IterablePluginPropertyJson": {
      "type": "object"
    },
    "BundleTimelineJson": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "bundleId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "externalKey": {
          "type": "string",
          "readOnly": true
        },
        "events": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/EventSubscriptionJson"
          }
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "TierJson": {
      "type": "object",
      "properties": {
        "limits": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/LimitJson"
          }
        },
        "fixedPrice": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PriceJson"
          }
        },
        "recurringPrice": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PriceJson"
          }
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TieredBlockJson"
          }
        }
      }
    },
    "PriceListJson": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "plans": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PaymentMethodPluginDetailJson": {
      "type": "object",
      "properties": {
        "externalPaymentMethodId": {
          "type": "string",
          "readOnly": true
        },
        "isDefaultPaymentMethod": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "properties": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PluginPropertyJson"
          }
        }
      }
    },
    "Tier": {
      "type": "object",
      "properties": {
        "fixedPrice": {
          "$ref": "#/definitions/InternationalPrice"
        },
        "recurringPrice": {
          "$ref": "#/definitions/InternationalPrice"
        },
        "limits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Limit"
          }
        },
        "tieredBlocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TieredBlock"
          }
        }
      }
    },
    "UserRolesJson": {
      "type": "object",
      "required": [
        "password",
        "roles",
        "username"
      ],
      "properties": {
        "username": {
          "type": "string",
          "readOnly": true
        },
        "password": {
          "type": "string",
          "readOnly": true
        },
        "roles": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Duration": {
      "type": "object",
      "properties": {
        "unit": {
          "type": "string",
          "enum": [
            "DAYS",
            "WEEKS",
            "MONTHS",
            "YEARS",
            "UNLIMITED"
          ]
        },
        "number": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SimplePlanJson": {
      "type": "object",
      "properties": {
        "planId": {
          "type": "string",
          "readOnly": true
        },
        "productName": {
          "type": "string",
          "readOnly": true
        },
        "productCategory": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "BASE",
            "ADD_ON",
            "STANDALONE"
          ]
        },
        "currency": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BYR",
            "BZD",
            "CAD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EGP",
            "ERN",
            "ETB",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GGP",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "IMP",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JEP",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SPL",
            "SRD",
            "STD",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRY",
            "TTD",
            "TVD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XCD",
            "XDR",
            "XOF",
            "XPF",
            "YER",
            "ZAR",
            "ZMW",
            "ZWD",
            "BTC"
          ]
        },
        "amount": {
          "type": "number",
          "readOnly": true
        },
        "billingPeriod": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DAILY",
            "WEEKLY",
            "BIWEEKLY",
            "THIRTY_DAYS",
            "MONTHLY",
            "QUARTERLY",
            "BIANNUAL",
            "ANNUAL",
            "BIENNIAL",
            "NO_BILLING_PERIOD"
          ]
        },
        "trialLength": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "trialTimeUnit": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DAYS",
            "WEEKS",
            "MONTHS",
            "YEARS",
            "UNLIMITED"
          ]
        },
        "availableBaseProducts": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProductJson": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "plans": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PlanJson"
          }
        },
        "included": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "available": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "HostedPaymentPageFieldsJson": {
      "type": "object",
      "properties": {
        "auditLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        },
        "customFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginPropertyJson"
          }
        }
      }
    },
    "IteratorPlanPhase": {
      "type": "object"
    },
    "PhasePriceOverrideJson": {
      "type": "object",
      "properties": {
        "planName": {
          "type": "string",
          "readOnly": true
        },
        "phaseName": {
          "type": "string",
          "readOnly": true
        },
        "phaseType": {
          "type": "string",
          "readOnly": true
        },
        "fixedPrice": {
          "type": "number",
          "readOnly": true
        },
        "recurringPrice": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "PlanDetailJson": {
      "type": "object",
      "properties": {
        "product": {
          "type": "string",
          "readOnly": true
        },
        "plan": {
          "type": "string",
          "readOnly": true
        },
        "priceList": {
          "type": "string",
          "readOnly": true
        },
        "finalPhaseBillingPeriod": {
          "type": "string",
          "enum": [
            "DAILY",
            "WEEKLY",
            "BIWEEKLY",
            "THIRTY_DAYS",
            "MONTHLY",
            "QUARTERLY",
            "BIANNUAL",
            "ANNUAL",
            "BIENNIAL",
            "NO_BILLING_PERIOD"
          ]
        },
        "finalPhaseRecurringPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceJson"
          }
        }
      }
    },
    "RolledUpUsageJson": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "rolledUpUnits": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RolledUpUnitJson"
          }
        }
      }
    },
    "PaymentMethodJson": {
      "type": "object",
      "properties": {
        "paymentMethodId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "externalKey": {
          "type": "string",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "isDefault": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "pluginName": {
          "type": "string",
          "readOnly": true
        },
        "pluginInfo": {
          "readOnly": true,
          "$ref": "#/definitions/PaymentMethodPluginDetailJson"
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "RolledUpUnitJson": {
      "type": "object",
      "properties": {
        "unitType": {
          "type": "string",
          "readOnly": true
        },
        "amount": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "Price": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "enum": [
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BYR",
            "BZD",
            "CAD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EGP",
            "ERN",
            "ETB",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GGP",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "IMP",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JEP",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SPL",
            "SRD",
            "STD",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRY",
            "TTD",
            "TVD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XCD",
            "XDR",
            "XOF",
            "XPF",
            "YER",
            "ZAR",
            "ZMW",
            "ZWD",
            "BTC"
          ]
        },
        "value": {
          "type": "number"
        }
      }
    },
    "AccountTimelineJson": {
      "type": "object",
      "properties": {
        "account": {
          "readOnly": true,
          "$ref": "#/definitions/AccountJson"
        },
        "bundles": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/BundleJson"
          }
        },
        "invoices": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/InvoiceJson"
          }
        },
        "payments": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/InvoicePaymentJson"
          }
        }
      }
    },
    "PluginServiceInfoJson": {
      "type": "object",
      "properties": {
        "serviceTypeName": {
          "type": "string",
          "readOnly": true
        },
        "registrationName": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Block": {
      "type": "object",
      "properties": {
        "unit": {
          "$ref": "#/definitions/Unit"
        },
        "price": {
          "$ref": "#/definitions/InternationalPrice"
        },
        "minTopUpCredit": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "type": "string",
          "enum": [
            "VANILLA",
            "TOP_UP",
            "TIERED"
          ]
        },
        "size": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SubscriptionUsageRecordJson": {
      "type": "object",
      "required": [
        "subscriptionId",
        "unitUsageRecords"
      ],
      "properties": {
        "subscriptionId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "trackingId": {
          "type": "string",
          "readOnly": true
        },
        "unitUsageRecords": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/UnitUsageRecordJson"
          }
        }
      }
    },
    "InvoiceDryRunJson": {
      "type": "object",
      "properties": {
        "dryRunType": {
          "type": "string",
          "readOnly": true
        },
        "dryRunAction": {
          "type": "string",
          "readOnly": true
        },
        "phaseType": {
          "type": "string",
          "readOnly": true
        },
        "productName": {
          "type": "string",
          "readOnly": true
        },
        "productCategory": {
          "type": "string",
          "readOnly": true
        },
        "billingPeriod": {
          "type": "string",
          "readOnly": true
        },
        "priceListName": {
          "type": "string",
          "readOnly": true
        },
        "subscriptionId": {
          "type": "string",
          "readOnly": true
        },
        "bundleId": {
          "type": "string",
          "readOnly": true
        },
        "effectiveDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "billingPolicy": {
          "type": "string",
          "readOnly": true
        },
        "priceOverrides": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PhasePriceOverrideJson"
          }
        }
      }
    },
    "NodeCommandJson": {
      "type": "object",
      "properties": {
        "systemCommandType": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "nodeCommandType": {
          "type": "string",
          "readOnly": true
        },
        "nodeCommandProperties": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/NodeCommandPropertyJson"
          }
        }
      }
    },
    "LimitJson": {
      "type": "object",
      "properties": {
        "unit": {
          "type": "string",
          "readOnly": true
        },
        "max": {
          "type": "string",
          "readOnly": true
        },
        "min": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SubscriptionJson": {
      "type": "object",
      "required": [
        "billingPeriod",
        "planName",
        "priceList",
        "productCategory",
        "productName"
      ],
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "bundleId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "subscriptionId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "externalKey": {
          "type": "string",
          "readOnly": true
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "productName": {
          "type": "string",
          "readOnly": true
        },
        "productCategory": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "BASE",
            "ADD_ON",
            "STANDALONE"
          ]
        },
        "billingPeriod": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DAILY",
            "WEEKLY",
            "BIWEEKLY",
            "THIRTY_DAYS",
            "MONTHLY",
            "QUARTERLY",
            "BIANNUAL",
            "ANNUAL",
            "BIENNIAL",
            "NO_BILLING_PERIOD"
          ]
        },
        "phaseType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "TRIAL",
            "DISCOUNT",
            "FIXEDTERM",
            "EVERGREEN"
          ]
        },
        "priceList": {
          "type": "string",
          "readOnly": true
        },
        "planName": {
          "type": "string",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "PENDING",
            "ACTIVE",
            "BLOCKED",
            "CANCELLED"
          ]
        },
        "sourceType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "NATIVE",
            "MIGRATED",
            "TRANSFERRED"
          ]
        },
        "cancelledDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "chargedThroughDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "billingStartDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "billingEndDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "billCycleDayLocal": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "events": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/EventSubscriptionJson"
          }
        },
        "priceOverrides": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PhasePriceOverrideJson"
          }
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "InvoiceItemJson": {
      "type": "object",
      "required": [
        "accountId",
        "invoiceItemId"
      ],
      "properties": {
        "invoiceItemId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "invoiceId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "linkedInvoiceItemId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "childAccountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "bundleId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "subscriptionId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "planName": {
          "type": "string",
          "readOnly": true
        },
        "phaseName": {
          "type": "string",
          "readOnly": true
        },
        "usageName": {
          "type": "string",
          "readOnly": true
        },
        "itemType": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "amount": {
          "type": "number",
          "readOnly": true
        },
        "currency": {
          "type": "string",
          "readOnly": true
        },
        "childItems": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/InvoiceItemJson"
          }
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "IterableInvoiceItemJson": {
      "type": "object"
    },
    "BulkBaseSubscriptionAndAddOnsJson": {
      "type": "object",
      "required": [
        "baseEntitlementAndAddOns"
      ],
      "properties": {
        "baseEntitlementAndAddOns": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SubscriptionJson"
          }
        }
      }
    },
    "UsageRecordJson": {
      "type": "object",
      "properties": {
        "recordDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "amount": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "StaticCatalog": {
      "type": "object",
      "properties": {
        "effectiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "availableBasePlanListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Listing"
          }
        },
        "recurringBillingMode": {
          "type": "string",
          "enum": [
            "IN_ADVANCE",
            "IN_ARREAR"
          ]
        },
        "catalogName": {
          "type": "string"
        },
        "currentProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "currentUnits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Unit"
          }
        },
        "currentSupportedCurrencies": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYR",
              "BZD",
              "CAD",
              "CDF",
              "CHF",
              "CLP",
              "CNY",
              "COP",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GGP",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "IMP",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JEP",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LTL",
              "LVL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRO",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SPL",
              "SRD",
              "STD",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TVD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "UYU",
              "UZS",
              "VEF",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XDR",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWD",
              "BTC"
            ]
          }
        },
        "currentPlans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        }
      }
    },
    "BundleJson": {
      "type": "object",
      "required": [
        "accountId"
      ],
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "bundleId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "externalKey": {
          "type": "string",
          "readOnly": true
        },
        "subscriptions": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SubscriptionJson"
          }
        },
        "timeline": {
          "readOnly": true,
          "$ref": "#/definitions/BundleTimelineJson"
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "RoleDefinitionJson": {
      "type": "object",
      "required": [
        "permissions",
        "role"
      ],
      "properties": {
        "role": {
          "type": "string",
          "readOnly": true
        },
        "permissions": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TieredBlock": {
      "type": "object",
      "properties": {
        "max": {
          "type": "number",
          "format": "double"
        },
        "unit": {
          "$ref": "#/definitions/Unit"
        },
        "price": {
          "$ref": "#/definitions/InternationalPrice"
        },
        "minTopUpCredit": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "type": "string",
          "enum": [
            "VANILLA",
            "TOP_UP",
            "TIERED"
          ]
        },
        "size": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Recurring": {
      "type": "object",
      "properties": {
        "billingPeriod": {
          "type": "string",
          "enum": [
            "DAILY",
            "WEEKLY",
            "BIWEEKLY",
            "THIRTY_DAYS",
            "MONTHLY",
            "QUARTERLY",
            "BIANNUAL",
            "ANNUAL",
            "BIENNIAL",
            "NO_BILLING_PERIOD"
          ]
        },
        "recurringPrice": {
          "$ref": "#/definitions/InternationalPrice"
        }
      }
    },
    "DurationJson": {
      "type": "object",
      "properties": {
        "unit": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DAYS",
            "WEEKS",
            "MONTHS",
            "YEARS",
            "UNLIMITED"
          ]
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        }
      }
    },
    "TagDefinitionJson": {
      "type": "object",
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "isControlTag": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "applicableObjectTypes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "PlanPhase": {
      "type": "object",
      "properties": {
        "duration": {
          "$ref": "#/definitions/Duration"
        },
        "usages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Usage"
          }
        },
        "phaseType": {
          "type": "string",
          "enum": [
            "TRIAL",
            "DISCOUNT",
            "FIXEDTERM",
            "EVERGREEN"
          ]
        },
        "recurring": {
          "$ref": "#/definitions/Recurring"
        },
        "fixed": {
          "$ref": "#/definitions/Fixed"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "OverdueConditionJson": {
      "type": "object",
      "properties": {
        "timeSinceEarliestUnpaidInvoiceEqualsOrExceeds": {
          "readOnly": true,
          "$ref": "#/definitions/DurationJson"
        },
        "controlTagInclusion": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "AUTO_PAY_OFF",
            "AUTO_INVOICING_OFF",
            "OVERDUE_ENFORCEMENT_OFF",
            "WRITTEN_OFF",
            "MANUAL_PAY",
            "TEST",
            "PARTNER"
          ]
        },
        "controlTagExclusion": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "AUTO_PAY_OFF",
            "AUTO_INVOICING_OFF",
            "OVERDUE_ENFORCEMENT_OFF",
            "WRITTEN_OFF",
            "MANUAL_PAY",
            "TEST",
            "PARTNER"
          ]
        },
        "numberOfUnpaidInvoicesEqualsOrExceeds": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "responseForLastFailedPayment": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "enum": [
              "INVALID_CARD",
              "EXPIRED_CARD",
              "LOST_OR_STOLEN_CARD",
              "DO_NOT_HONOR",
              "INSUFFICIENT_FUNDS",
              "DECLINE",
              "PROCESSING_ERROR",
              "INVALID_AMOUNT",
              "DUPLICATE_TRANSACTION",
              "OTHER"
            ]
          }
        },
        "totalUnpaidInvoiceBalanceEqualsOrExceeds": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "PriceList": {
      "type": "object",
      "properties": {
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Fixed": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/InternationalPrice"
        },
        "type": {
          "type": "string",
          "enum": [
            "ONE_TIME"
          ]
        }
      }
    },
    "UnitUsageRecordJson": {
      "type": "object",
      "properties": {
        "unitType": {
          "type": "string",
          "readOnly": true
        },
        "usageRecords": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/UsageRecordJson"
          }
        }
      }
    },
    "TagJson": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "objectType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ACCOUNT",
            "ACCOUNT_EMAIL",
            "BLOCKING_STATES",
            "BUNDLE",
            "CUSTOM_FIELD",
            "INVOICE",
            "PAYMENT",
            "TRANSACTION",
            "INVOICE_ITEM",
            "INVOICE_PAYMENT",
            "SUBSCRIPTION",
            "SUBSCRIPTION_EVENT",
            "SERVICE_BROADCAST",
            "PAYMENT_ATTEMPT",
            "PAYMENT_METHOD",
            "REFUND",
            "TAG",
            "TAG_DEFINITION",
            "TENANT",
            "TENANT_KVS"
          ]
        },
        "objectId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "tagDefinitionId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "tagDefinitionName": {
          "type": "string",
          "readOnly": true
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "Usage": {
      "type": "object",
      "properties": {
        "billingPeriod": {
          "type": "string",
          "enum": [
            "DAILY",
            "WEEKLY",
            "BIWEEKLY",
            "THIRTY_DAYS",
            "MONTHLY",
            "QUARTERLY",
            "BIANNUAL",
            "ANNUAL",
            "BIENNIAL",
            "NO_BILLING_PERIOD"
          ]
        },
        "fixedPrice": {
          "$ref": "#/definitions/InternationalPrice"
        },
        "recurringPrice": {
          "$ref": "#/definitions/InternationalPrice"
        },
        "tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tier"
          }
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Block"
          }
        },
        "limits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Limit"
          }
        },
        "billingMode": {
          "type": "string",
          "enum": [
            "IN_ADVANCE",
            "IN_ARREAR"
          ]
        },
        "usageType": {
          "type": "string",
          "enum": [
            "CAPACITY",
            "CONSUMABLE"
          ]
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PaymentTransactionJson": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "transactionExternalKey": {
          "type": "string",
          "readOnly": true
        },
        "paymentId": {
          "type": "string",
          "format": "uuid",
          "description": "Associated payment id, required when notifying state transitions",
          "readOnly": true
        },
        "paymentExternalKey": {
          "type": "string",
          "readOnly": true
        },
        "transactionType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "AUTHORIZE",
            "CAPTURE",
            "CHARGEBACK",
            "CREDIT",
            "PURCHASE",
            "REFUND",
            "VOID"
          ]
        },
        "amount": {
          "type": "number",
          "description": "Transaction amount, required except for void operations",
          "readOnly": true
        },
        "currency": {
          "type": "string",
          "description": "Amount currency (account currency unless specified)",
          "readOnly": true,
          "enum": [
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BYR",
            "BZD",
            "CAD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EGP",
            "ERN",
            "ETB",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GGP",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "IMP",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JEP",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SPL",
            "SRD",
            "STD",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRY",
            "TTD",
            "TVD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XCD",
            "XDR",
            "XOF",
            "XPF",
            "YER",
            "ZAR",
            "ZMW",
            "ZWD",
            "BTC"
          ]
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "processedAmount": {
          "type": "number",
          "readOnly": true
        },
        "processedCurrency": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Transaction status, required for state change notifications",
          "readOnly": true,
          "enum": [
            "SUCCESS",
            "UNKNOWN",
            "PENDING",
            "PAYMENT_FAILURE",
            "PLUGIN_FAILURE",
            "PAYMENT_SYSTEM_OFF"
          ]
        },
        "gatewayErrorCode": {
          "type": "string",
          "readOnly": true
        },
        "gatewayErrorMsg": {
          "type": "string",
          "readOnly": true
        },
        "firstPaymentReferenceId": {
          "type": "string",
          "readOnly": true
        },
        "secondPaymentReferenceId": {
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PluginPropertyJson"
          }
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      },
      "description": "Payment transaction"
    },
    "SubjectJson": {
      "type": "object",
      "properties": {
        "principal": {
          "type": "string",
          "readOnly": true
        },
        "isAuthenticated": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "isRemembered": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "session": {
          "readOnly": true,
          "$ref": "#/definitions/SessionJson"
        }
      }
    },
    "PluginPropertyJson": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "readOnly": true
        },
        "isUpdatable": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        }
      }
    },
    "PlanJson": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "billingPeriod": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DAILY",
            "WEEKLY",
            "BIWEEKLY",
            "THIRTY_DAYS",
            "MONTHLY",
            "QUARTERLY",
            "BIANNUAL",
            "ANNUAL",
            "BIENNIAL",
            "NO_BILLING_PERIOD"
          ]
        },
        "phases": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PhaseJson"
          }
        }
      }
    },
    "TieredBlockJson": {
      "type": "object",
      "properties": {
        "unit": {
          "type": "string",
          "readOnly": true
        },
        "size": {
          "type": "string",
          "readOnly": true
        },
        "max": {
          "type": "string",
          "readOnly": true
        },
        "prices": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PriceJson"
          }
        }
      }
    },
    "PhaseJson": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "readOnly": true
        },
        "prices": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PriceJson"
          }
        },
        "fixedPrices": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PriceJson"
          }
        },
        "duration": {
          "readOnly": true,
          "$ref": "#/definitions/DurationJson"
        },
        "usages": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/UsageJson"
          }
        }
      }
    },
    "PluginInfoJson": {
      "type": "object",
      "properties": {
        "bundleSymbolicName": {
          "type": "string",
          "readOnly": true
        },
        "pluginKey": {
          "type": "string",
          "readOnly": true
        },
        "pluginName": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "readOnly": true
        },
        "isSelectedForStart": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "services": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PluginServiceInfoJson"
          }
        }
      }
    },
    "AuditLogJson": {
      "type": "object",
      "properties": {
        "changeType": {
          "type": "string",
          "readOnly": true
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "changedBy": {
          "type": "string",
          "readOnly": true
        },
        "reasonCode": {
          "type": "string",
          "readOnly": true
        },
        "comments": {
          "type": "string",
          "readOnly": true
        },
        "userToken": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Plan": {
      "type": "object",
      "properties": {
        "recurringBillingPeriod": {
          "type": "string",
          "enum": [
            "DAILY",
            "WEEKLY",
            "BIWEEKLY",
            "THIRTY_DAYS",
            "MONTHLY",
            "QUARTERLY",
            "BIANNUAL",
            "ANNUAL",
            "BIENNIAL",
            "NO_BILLING_PERIOD"
          ]
        },
        "priceListName": {
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "allPhases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlanPhase"
          }
        },
        "finalPhase": {
          "$ref": "#/definitions/PlanPhase"
        },
        "plansAllowedInBundle": {
          "type": "integer",
          "format": "int32"
        },
        "effectiveDateForExistingSubscriptions": {
          "type": "string",
          "format": "date-time"
        },
        "initialPhases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlanPhase"
          }
        },
        "initialPhaseIterator": {
          "$ref": "#/definitions/IteratorPlanPhase"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ComboPaymentTransactionJson": {
      "type": "object",
      "properties": {
        "account": {
          "readOnly": true,
          "$ref": "#/definitions/AccountJson"
        },
        "paymentMethod": {
          "readOnly": true,
          "$ref": "#/definitions/PaymentMethodJson"
        },
        "transaction": {
          "readOnly": true,
          "$ref": "#/definitions/PaymentTransactionJson"
        },
        "paymentMethodPluginProperties": {
          "readOnly": true,
          "$ref": "#/definitions/IterablePluginPropertyJson"
        },
        "transactionPluginProperties": {
          "readOnly": true,
          "$ref": "#/definitions/IterablePluginPropertyJson"
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        },
        "transactionType": {
          "type": "string"
        }
      }
    },
    "SessionJson": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "lastAccessDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "timeout": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "host": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ClockResource": {
      "type": "object",
      "properties": {
        "currentUtcTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "timeZone": {
          "type": "string",
          "readOnly": true
        },
        "localDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        }
      }
    },
    "OverdueJson": {
      "type": "object",
      "properties": {
        "initialReevaluationInterval": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "overdueStates": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/OverdueStateConfigJson"
          }
        }
      }
    },
    "PaymentAttemptJson": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "paymentMethodId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "paymentExternalKey": {
          "type": "string",
          "readOnly": true
        },
        "transactionId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "transactionExternalKey": {
          "type": "string",
          "readOnly": true
        },
        "transactionType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "AUTHORIZE",
            "CAPTURE",
            "CHARGEBACK",
            "CREDIT",
            "PURCHASE",
            "REFUND",
            "VOID"
          ]
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "stateName": {
          "type": "string",
          "readOnly": true
        },
        "amount": {
          "type": "number",
          "description": "Transaction amount, required except for void operations",
          "readOnly": true
        },
        "currency": {
          "type": "string",
          "description": "Amount currency (account currency unless specified)",
          "readOnly": true,
          "enum": [
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BYR",
            "BZD",
            "CAD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EGP",
            "ERN",
            "ETB",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GGP",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "IMP",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JEP",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SPL",
            "SRD",
            "STD",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRY",
            "TTD",
            "TVD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XCD",
            "XDR",
            "XOF",
            "XPF",
            "YER",
            "ZAR",
            "ZMW",
            "ZWD",
            "BTC"
          ]
        },
        "pluginName": {
          "type": "string",
          "readOnly": true
        },
        "pluginProperties": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PluginPropertyJson"
          }
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      },
      "description": "Payment attempt"
    },
    "Listing": {
      "type": "object",
      "properties": {
        "priceList": {
          "$ref": "#/definitions/PriceList"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        }
      }
    },
    "ComboHostedPaymentPageJson": {
      "type": "object",
      "properties": {
        "account": {
          "readOnly": true,
          "$ref": "#/definitions/AccountJson"
        },
        "paymentMethod": {
          "readOnly": true,
          "$ref": "#/definitions/PaymentMethodJson"
        },
        "paymentMethodPluginProperties": {
          "readOnly": true,
          "$ref": "#/definitions/IterablePluginPropertyJson"
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        },
        "hostedPaymentPageFieldsJson": {
          "$ref": "#/definitions/HostedPaymentPageFieldsJson"
        }
      }
    },
    "PaymentJson": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "paymentId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "paymentNumber": {
          "type": "string",
          "readOnly": true
        },
        "paymentExternalKey": {
          "type": "string",
          "readOnly": true
        },
        "authAmount": {
          "type": "number",
          "readOnly": true
        },
        "capturedAmount": {
          "type": "number",
          "readOnly": true
        },
        "purchasedAmount": {
          "type": "number",
          "readOnly": true
        },
        "refundedAmount": {
          "type": "number",
          "readOnly": true
        },
        "creditedAmount": {
          "type": "number",
          "readOnly": true
        },
        "currency": {
          "type": "string",
          "readOnly": true
        },
        "paymentMethodId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "transactions": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PaymentTransactionJson"
          }
        },
        "paymentAttempts": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PaymentAttemptJson"
          }
        },
        "auditLogs": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditLogJson"
          }
        }
      }
    },
    "Limit": {
      "type": "object",
      "properties": {
        "max": {
          "type": "number",
          "format": "double"
        },
        "unit": {
          "$ref": "#/definitions/Unit"
        },
        "min": {
          "type": "number",
          "format": "double"
        }
      }
    }
  }
}